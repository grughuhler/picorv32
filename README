This directory contains a simple SoC that uses the risc-v (32-bit)
core from https://github.com/YosysHQ/picorv32.  File picorv32.v is
from there.  It is the core.

File top.v is the top level module and integrates the SoC's
components which are:

* The risc-v core.
* 8192 bytes of SRAM memory (adjustable see c_code/Makefile)
* A small reset controller.
* A UART (wrapper around the simpleuart from
  https://github.com/YosysHQ/picorv32).
* An LED driver that supports read and write.
* A 32-bit count-down timer that can be read and written.
  It counts down to zero and stops.
* A Gowin user flash controller implemented two ways:
  - uflash.v uses the Gowin user flash controller soft
    IP block.  Clock speed limit = 50 MHz.
  - uflash_controller.v is a controller that I wrote. Clock
    speed limit = 40 MHz.
  You can use either controller. Just enable one of them using
  the Gowin GUI.  uflash.v is faster, especially for slow
  clock speeds.  I tested both with clocks speeds of 5.4 and
  40.5 MHz (the latter being a slight overclocking for uflash.v).

The project targets the Tang Nano 9K FPGA development board that
contains a Gowin GW1NR-9LV FPGA.  It is intended to be very
simple and direct.  There are no integration abstractions.

It was built using the educational version of the Gowin IDE and
tool chain, Version 1.9.9.03 Education (64-bit) build (73833).

The Gowin IDE should build it.  See the README in directory c_code for
information on how to build the software.  The program already in
mem_init.v presents a menu of options.

S1 is the reset button.  Serial port: 115200, no parity, no flow control.

The SRAM is initialized by the C code and then the Verilog build
process.  This is how the software is "loaded".  See README in
the c_code directory.

See https://www.youtube.com/@electronics.tinker/videos for a video
about this-- and more videos about the Tang Nano 9K.

Video about this project: https://youtu.be/uRGNqobXO5E

First video about PicoRV32: https://youtu.be/cq7ETOCPIBM.


See the channel for several later videos.

Git Branches

main

  The main branch contains the original design as described in the first
  video.

infer_sram

  Uses the (much better) method of creating the SRAM via Verilog Inference.

gowin_user_flash

  Adds support for Gowin integrated user flash using a Gowin soft IP
  controller block.

faster_user_flash (latest)

  Adds a user flash controller that I wrote.  You can use either it or
  the previous one.  Both remain present in the Gowin IDE project.  Just
  enable either one of them.

To get the latest project:

git clone https://github.com/grughuhler/picorv32.git
cd picorv32/
git branch -a
git checkout -b faster_user_flash remotes/origin/faster_user_flash

Connect the Tang Nano board to a host computer via USB.  Open a
terminal emulator on the host computer (speed 115200).  Enter "he" to
see a list of commands.  Type all numbers in hex.

